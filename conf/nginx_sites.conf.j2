## redirect http to https for all hosts
server {
    listen       80;

    location /.well-known { # for letsencrypt
        default_type "text/plain";
        alias /var/www/.well-known;
    }
    location / {
        return       301 https://$host$request_uri;
    }
}

## redirect https://domain.com to https://www.domain.com
server {
    listen       443;
    server_name  {{ nginx.domain.name }};

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl    on;
    ssl_certificate    {{ nginx.ssl.pem }};
    ssl_certificate_key    {{ nginx.ssl.key }};

    location /.well-known { # for letsencrypt
        default_type "text/plain";
        alias /var/www/.well-known;
    }
    location / {
        return       301 https://www.{{ nginx.domain.name }}$request_uri;
    }
}

## serve https://www.domain.com
### Rate limit the below
limit_req_zone  $binary_remote_addr  zone=one:10m   rate=5r/m;
server {
    listen       443;
    server_name  www.{{ nginx.domain.name }};

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl    on;
    ssl_certificate    {{ nginx.ssl.pem }};
    ssl_certificate_key    {{ nginx.ssl.key }};

    location / {
        proxy_pass http://{{ vagrant.address }}:10080;
        proxy_set_header        Host            $host;
        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    location ~* wp\-login\.php {
         limit_req   zone=one  burst=1 nodelay;
         proxy_pass http://{{ vagrant.address }}:10080;
         proxy_set_header        Host            $host;
         proxy_set_header        X-Real-IP       $remote_addr;
         proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}


## serve https://registry.domain.com
server {
    listen       443;
    server_name  registry.{{ nginx.domain.name }} registry.paxarm.com;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl    on;
    ssl_certificate    {{ nginx.ssl.pem }};
    ssl_certificate_key    {{ nginx.ssl.key }};
    autoindex on;
 
    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;

    # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
    chunked_transfer_encoding on;

    location /v2/ {
        # Do not allow connections from docker 1.5 and earlier
        # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
        if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
            return 404;
        }
        add_header 'Docker-Distribution-Api-Version' 'registry/2.0' always;

        proxy_set_header  X-Forwarded-Proto $scheme;

        proxy_pass http://{{ vagrant.address }}:5000;
        proxy_set_header        Host            $host;
        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        auth_basic "Authentication Required";
        auth_basic_user_file /etc/nginx/htpasswd;
   }
}

## serve https://pvr.domain.com
### Rate limit the below
limit_req_zone  $binary_remote_addr  zone=two:10m   rate=5r/m;
server {
    listen       443;
    server_name  pvr.{{ nginx.domain.name }};

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl    on;
    ssl_certificate    {{ nginx.ssl.pem }};
    ssl_certificate_key    {{ nginx.ssl.key }};

    location / {
        proxy_pass http://192.168.3.9:81;
        proxy_set_header        Host            $host;
        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    location ~* login\.htm {
         limit_req   zone=two  burst=1 nodelay;
         proxy_pass http://192.168.3.9:81;
         proxy_set_header        Host            $host;
         proxy_set_header        X-Real-IP       $remote_addr;
         proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

## serve https://s.domain.com
server {
    listen       443;
    server_name  s.{{ nginx.domain.name }} api.{{ nginx.domain.name }} s.paxarm.com api.paxarm.com www.paxarm.com;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl    on;
    ssl_certificate    {{ nginx.ssl.pem }};
    ssl_certificate_key    {{ nginx.ssl.key }};
    autoindex on;
 
    location / {
        root /var/www;
        index index.html;
    }
}

## serve https://whatismyip.domain.com
server {
    listen       443;
    server_name  whatismyip.{{ nginx.domain.name }};

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl    on;
    ssl_certificate    {{ nginx.ssl.pem }};
    ssl_certificate_key    {{ nginx.ssl.key }};
    autoindex on;

    location / {
        return 200 "ip: $remote_addr";
        add_header Content-Type text/plain;
    }
}
